object mainObject {
  
import scala.annotation.tailrec
        import scala.util.Random
        import scala.io.StdIn.readInt
        object mainObject {
  
import scala.annotation.tailrec
        import scala.util.Random
        import scala.io.StdIn.readInt
        
        import scala.annotation.tailrec
        import scala.util.Random
        import scala.io.StdIn.readInt
        
        
        def recorrerTablero(tablero: List[Char], index: Int): Char =
        {
                @tailrec def recorrerDentro(tablero: List[Char], i: Int, index: Int): Char =
                {
                        tablero match
                        {
                                case head :: tail => if (i == index) head
                                else recorrerDentro(tail, i + 1, index) 
                                case Nil => 'Z'
                        }
                }
                
                recorrerDentro(tablero, 1, index)
        }
        
  def recorrerLista(tablero: List[Int], index: Int): Int =
        {
                @tailrec def ListaDentro(tablero: List[Int], i: Int, index: Int): Int =
                {
                        tablero match
                        {
                                case head :: tail => if (i == index) head 
                                else ListaDentro(tail, i + 1, index) 
                                case Nil => 'Z'
                        }
                }
                
                ListaDentro(tablero, 1, index)
        }
        
        @tailrec def crearTablero(tablero: List[Char], numeroDeValores: Int): List[Char] =
        {
                val posAleatoria = 1 + Random.nextInt(81)
                val letrasPosibles = List('A', 'N', 'R', 'V', 'M', 'G') 
                val letraAleatoria = recorrerTablero(letrasPosibles, 1 + Random.nextInt(letrasPosibles.length))
                val aux = realizarMovimiento(letraAleatoria, posAleatoria, tablero)
                if (numeroDeValores > 1) crearTablero(aux, numeroDeValores - 1) else aux
        }
        
        /**
         * Método utilizado para poder imprimir el tablero por la pantalla.
         *
         * @param tablero Tablero que queremos enseñar por pantalla.
         */
        def mostrarTablero(tablero: List[Char]): Unit = 
        {
                @tailrec def mostrarDentro(tablero: List[Char], i: Int): Unit = 
                {
                        tablero match
                        {
                                case head :: tail => if (i % 9 == 0) println(head) 
                                else print(head)
                                        mostrarDentro(tail, i + 1)
                                case Nil =>
                        }
                }
                
                mostrarDentro(tablero, 1)
        }
        


        
        def comprobarFin(tablero: List[Char]): Boolean =
        {
                @tailrec def comprobarDentro(tablero: List[Char], i: Int): Boolean =
                {
                        tablero match
                        {
                                case head :: tail => if (head == '-') false else comprobarDentro(tail, i + 1)
                                case Nil => true
                        }
                }
                
                comprobarDentro(tablero, 1)
        }
        
        
        def conseguirIndice(columna: Int, fila: Int): Int =
        {
                9 * (fila - 1) + columna
        }
        
        
        def calcularMovimiento(tablero: List[Char], posInicial: Int, posFinal: Int): Int =
        {
                val filaInicial = (posInicial + 9) / 9 
                val colInicial = posInicial % 9 
                val filaFinal = (posFinal + 9) / 9 
                val colFinal = posFinal % 9 
                val filaPosible = if (filaInicial < filaFinal) filaInicial + 1 
                else if (filaInicial > filaFinal) filaInicial - 1 else filaInicial
                val colPosible = if (colInicial < colFinal) colInicial + 1 
                else if (colInicial > colFinal) colInicial - 1 else colInicial
                
                if (filaPosible != filaInicial && recorrerTablero(tablero, conseguirIndice(colInicial, filaPosible)) == '-')
                {
                        conseguirIndice(colInicial, filaPosible) 
                } else if (colPosible != colInicial && recorrerTablero(tablero, conseguirIndice(colPosible, filaInicial)) == '-')
                {
                        conseguirIndice(colPosible, filaInicial) 
                } else -1 
        }
        
        
        @tailrec def comprobarMovimiento(tablero: List[Char], posInicial: Int, posFinal: Int): Boolean =
        {
                if (posInicial == posFinal) true 
                else 
                {
                        val nuevoInicial = calcularMovimiento(tablero, posInicial, posFinal)
                        if (nuevoInicial == -1) false 
                        else comprobarMovimiento(tablero, nuevoInicial, posFinal)
                }
        }
        
        
        @tailrec def seleccionarBola(tablero: List[Char]): Int =
        {
                println("¿En qué fila se encuentra la bola deseada?")
                val fila = readInt()
                println("¿En qué columna se encuentra la bola deseada?")
                val columna = readInt()
                val posicionBola = conseguirIndice(columna, fila)
                if (posicionBola >= 0 && posicionBola < tablero.length && recorrerTablero(tablero, posicionBola) != '-') posicionBola else
                {
                        println("Esa posición no se encuentra dentro del tablero, por favor vuelva a intentarlo")
                        seleccionarBola(tablero)
                }
        }
        
        
        @tailrec def pedirMovimiento(tablero: List[Char], posInicial: Int): Int =
        {
                println("¿En qué fila quieres poner la bola seleccionada?")
                val fila = readInt()
                println("¿En qué columna quieres poner la bola seleccionada?")
                val columna = readInt()
                val posFinal = conseguirIndice(columna, fila) 
                if (comprobarMovimiento(tablero, posInicial, posFinal)) posFinal else
                {
                        println("Movimiento no válido, vuelva a intentarlo con otro movimiento")
                        pedirMovimiento(tablero, posInicial)
                }
        }
        
        
        def realizarMovimiento(bola: Char, pos: Int, tablero: List[Char]): List[Char] =
        {
                if (tablero.isEmpty) Nil else if (pos == 1) bola :: tablero.tail else tablero.head :: realizarMovimiento(bola, pos - 1, tablero.tail)
        }
        
        
        @tailrec def bucleJuego(tablero: List[Char], puntuacion: Int): Unit =
        {
                mostrarTablero(tablero)
                if (comprobarFin(tablero))
                        {
                                println("Se acabó el juego")
                                println("Escriba 1 si quiere volver a jugar, 2 si quiere guardar su puntuacion, o tres si quiere salir")
                                val opcion = readInt()
                                opcion match{
                                  case 1 =>{ 
                                  val aux = List.fill(81)('-')
                      val tablero = crearTablero(aux, 9)
                      bucleJuego(tablero, 0)
                                  }
                                  case 2 => puntuacion 
                                  case 3 => Nil 
                                }
                
                                
                        } else
                        {
                                val posicionInicialElegida = seleccionarBola(tablero)
                                val posicionFinalElegida = pedirMovimiento(tablero, posicionInicialElegida)
                                val aux = realizarMovimiento(recorrerTablero(tablero, posicionInicialElegida), posicionFinalElegida, tablero)
                                val actualizado = realizarMovimiento('-', posicionInicialElegida, aux)
                          val seleccion = comprobar5(tablero)
                                if(seleccion.length != 0){
                                  val puntuacionActualizada = seleccion.length * 75
                                  val nuevoTablero = borrar5(seleccion, actualizado)
                                  bucleJuego(nuevoTablero, puntuacion + puntuacionActualizada)
                                }else{
                                
                                
                                val NuevoTablero =  crearTablero(actualizado, 3) 
                          bucleJuego(NuevoTablero, puntuacion)
                          
                        }
                
        }


          def comprobarHorizontal(tablero: List[Char], index: Int, seleccion: List[Int]) : List[Int] = {
 
    val seleccion1 = index::seleccion    
          if (index % 9 == 0){ 
                            comprobarHorizontal(tablero, index + seleccion1.length, List(index + 1))
                    }
  
                if (recorrerTablero(tablero, index) == recorrerTablero(tablero, index + 1)){ 
                 
                        if (seleccion1.length >= 5){
                    seleccion1 
                        }
                  else if (tablero.length == index) { seleccion1 
                  }
                    else comprobarHorizontal(tablero, index + 1, seleccion1)
                  }
                
                else {
                  val seleccionnew = List(index + 1) 
                  if (index == tablero.length) { seleccionnew 
      }
                  else{            
                    if (index + seleccion1.length - 1 % 9 == 0){ //Cambio de fila 
                            comprobarHorizontal(tablero, index + seleccion1.length, List(index + 1)) 
                    }
                    else comprobarHorizontal(tablero, index + seleccion1.length, seleccionnew)
                  }
                }        
  }
  
  def comprobarVerticales(tablero: List[Char], index: Int, seleccion: List[Int]) : List[Int] = {
    
    val seleccion1 = comprobarVertical(tablero, index, List(index))
        if(seleccion1.length >= 5)
          seleccion1
        else{
          comprobarVerticales(tablero, index + 1, List(index + 1))
        }
    
  }
  def comprobarVertical(tablero: List[Char], index: Int, seleccion: List[Int]) : List[Int] = {
          
    if (index == tablero.length){ 
                    Nil
    }
                    else{     
                      
                if (recorrerTablero(tablero, index) == recorrerTablero(tablero, index + 9)){
                  if (seleccion.length + 1 >= 4){
                    val newSeleccion= index + 9::seleccion 
                    val seleccionDef = recorrerLista(seleccion, seleccion.length) - 9 :: newSeleccion
                    seleccionDef
                  }
                        else {
                          comprobarVertical(tablero, index +9, index +9::seleccion) 
                  }
                }
                      else {
                        print(index)
                        comprobarVertical(tablero, index + 1, List(index + 1)        )
                }
                     
        }
        }
  
  def comprobarDiagonalDerecha(tablero: List[Char], index: Int, seleccion: List[Int] ,anterior: Int) : List[Int] = {
          
           if (anterior == 1) {
            if (recorrerTablero(tablero, index) == recorrerTablero(tablero, index + 9)){ 
              if (seleccion.length + 1 >= 5){
                       println(index+9:: seleccion)
                index+9:: seleccion   
                     
              }
              else comprobarDiagonalDerecha(tablero,index + 9, index+9::seleccion,0)
            }
            else Nil  
          }
           else 
             if (recorrerTablero(tablero, index) == recorrerTablero(tablero, index + 1)){ 
              if (seleccion.length + 1 >= 5){
                println(index+1:: seleccion)
                       index+1:: seleccion //Devolvemos la lista  
              }
              else comprobarDiagonalDerecha(tablero,index + 1, index+1 :: seleccion,1)
            }            
            
            else Nil 
        }
  
  def comprobarDiagonalIzquierda(tablero: List[Char], index: Int, seleccion: List[Int] ,anterior: Int) : List[Int] = {
          
           if (anterior == 1) { 
            if (recorrerTablero(tablero, index) == recorrerTablero(tablero, index + 9)){ 
              if (seleccion.length + 1 >= 5){
                      index+9:: seleccion  
              }
              else comprobarDiagonalIzquierda(tablero,index + 9, index+9::seleccion,0)
            }
            else Nil 
          }
           else 
             if (recorrerTablero(tablero, index) == recorrerTablero(tablero, index - 1)){ 
              if (seleccion.length + 1 >= 5){
                      index-1:: seleccion  
              }
              else comprobarDiagonalIzquierda(tablero,index - 1, index-1 :: seleccion,1)
            }
            else Nil 
        }
        
        
        def comprobarDiagonales(tablero: List[Char], index: Int, seleccion: List[Int]) : List[Int] = {
          
          
          val diagonalDerecha1 = comprobarDiagonalDerecha(tablero,index, seleccion,0)
          val diagonalIzquierda1= comprobarDiagonalIzquierda(tablero,index, seleccion,0)
          val diagonalDerecha2 = comprobarDiagonalDerecha(tablero,index, seleccion,1)
          val diagonalIzquierda2= comprobarDiagonalIzquierda(tablero,index, seleccion,1)
          
          
          if (diagonalDerecha1.length >= 5){ 
                     diagonalDerecha1
              }
          else if (diagonalDerecha2.length >= 5){ 
                     diagonalDerecha2
              }
          else if (diagonalIzquierda1.length >= 5){ 
                     diagonalIzquierda1
              }
          else if (diagonalIzquierda2.length >= 5){ 
                     diagonalIzquierda2
              }
          else 
            if (index < tablero.length) comprobarDiagonales(tablero,index + 1, List(index + 1)) else Nil
              
        }
        def comprobar5(tablero: List[Char]) : List[Int] = {
          
         
          if (comprobarHorizontal(tablero,1, Nil).length >= 5){ 
                     comprobarHorizontal(tablero,1, Nil)
              }
          else if (comprobarVertical(tablero,1, Nil).length >= 5){ 
                     comprobarVertical(tablero,1, Nil)
              }
           else if (comprobarDiagonales(tablero,1, Nil).length >= 5){ 
                     comprobarDiagonales(tablero,1, Nil)
              }
          else  Nil
             
  }
        def borrar5( lista : List[Int], tablero: List[Char]): List[Char] = {
          realizarMovimiento('-', lista.head, tablero)
          borrar5(lista.tail,tablero)
        } 
        def main(args: Array[String]): Unit =
        {
                val aux = List.fill(81)('-')
                val tablero = crearTablero(aux, 9)
                bucleJuego(tablero, 0)
        }
}
        import scala.annotation.tailrec
        import scala.util.Random
        import scala.io.StdIn.readInt
        
        
        def recorrerTablero(tablero: List[Char], index: Int): Char =
        {
                @tailrec def recorrerDentro(tablero: List[Char], i: Int, index: Int): Char =
                {
                        tablero match
                        {
                                case head :: tail => if (i == index) head
                                else recorrerDentro(tail, i + 1, index) 
                                case Nil => 'Z'
                        }
                }
                
                recorrerDentro(tablero, 1, index)
        }
        
  def recorrerLista(tablero: List[Int], index: Int): Int =
        {
                @tailrec def ListaDentro(tablero: List[Int], i: Int, index: Int): Int =
                {
                        tablero match
                        {
                                case head :: tail => if (i == index) head 
                                else ListaDentro(tail, i + 1, index) 
                                case Nil => 'Z'
                        }
                }
                
                ListaDentro(tablero, 1, index)
        }
        
        @tailrec def crearTablero(tablero: List[Char], numeroDeValores: Int): List[Char] =
        {
                val posAleatoria = 1 + Random.nextInt(81)
                val letrasPosibles = List('A', 'N', 'R', 'V', 'M', 'G') 
                val letraAleatoria = recorrerTablero(letrasPosibles, 1 + Random.nextInt(letrasPosibles.length))
                val aux = realizarMovimiento(letraAleatoria, posAleatoria, tablero)
                if (numeroDeValores > 1) crearTablero(aux, numeroDeValores - 1) else aux
        }
        
        /**
         * Método utilizado para poder imprimir el tablero por la pantalla.
         *
         * @param tablero Tablero que queremos enseñar por pantalla.
         */
        def mostrarTablero(tablero: List[Char]): Unit = 
        {
                @tailrec def mostrarDentro(tablero: List[Char], i: Int): Unit = 
                {
                        tablero match
                        {
                                case head :: tail => if (i % 9 == 0) println(head) 
                                else print(head)
                                        mostrarDentro(tail, i + 1)
                                case Nil =>
                        }
                }
                
                mostrarDentro(tablero, 1)
        }
        


        
        def comprobarFin(tablero: List[Char]): Boolean =
        {
                @tailrec def comprobarDentro(tablero: List[Char], i: Int): Boolean =
                {
                        tablero match
                        {
                                case head :: tail => if (head == '-') false else comprobarDentro(tail, i + 1)
                                case Nil => true
                        }
                }
                
                comprobarDentro(tablero, 1)
        }
        
        
        def conseguirIndice(columna: Int, fila: Int): Int =
        {
                9 * (fila - 1) + columna
        }
        
        
        def calcularMovimiento(tablero: List[Char], posInicial: Int, posFinal: Int): Int =
        {
                val filaInicial = (posInicial + 9) / 9 
                val colInicial = posInicial % 9 
                val filaFinal = (posFinal + 9) / 9 
                val colFinal = posFinal % 9 
                val filaPosible = if (filaInicial < filaFinal) filaInicial + 1 
                else if (filaInicial > filaFinal) filaInicial - 1 else filaInicial
                val colPosible = if (colInicial < colFinal) colInicial + 1 
                else if (colInicial > colFinal) colInicial - 1 else colInicial
                
                if (filaPosible != filaInicial && recorrerTablero(tablero, conseguirIndice(colInicial, filaPosible)) == '-')
                {
                        conseguirIndice(colInicial, filaPosible) 
                } else if (colPosible != colInicial && recorrerTablero(tablero, conseguirIndice(colPosible, filaInicial)) == '-')
                {
                        conseguirIndice(colPosible, filaInicial) 
                } else -1 
        }
        
        
        @tailrec def comprobarMovimiento(tablero: List[Char], posInicial: Int, posFinal: Int): Boolean =
        {
                if (posInicial == posFinal) true 
                else 
                {
                        val nuevoInicial = calcularMovimiento(tablero, posInicial, posFinal)
                        if (nuevoInicial == -1) false 
                        else comprobarMovimiento(tablero, nuevoInicial, posFinal)
                }
        }
        
        
        @tailrec def seleccionarBola(tablero: List[Char]): Int =
        {
                println("¿En qué fila se encuentra la bola deseada?")
                val fila = readInt()
                println("¿En qué columna se encuentra la bola deseada?")
                val columna = readInt()
                val posicionBola = conseguirIndice(columna, fila)
                if (posicionBola >= 0 && posicionBola < tablero.length && recorrerTablero(tablero, posicionBola) != '-') posicionBola else
                {
                        println("Esa posición no se encuentra dentro del tablero, por favor vuelva a intentarlo")
                        seleccionarBola(tablero)
                }
        }
        
        
        @tailrec def pedirMovimiento(tablero: List[Char], posInicial: Int): Int =
        {
                println("¿En qué fila quieres poner la bola seleccionada?")
                val fila = readInt()
                println("¿En qué columna quieres poner la bola seleccionada?")
                val columna = readInt()
                val posFinal = conseguirIndice(columna, fila) 
                if (comprobarMovimiento(tablero, posInicial, posFinal)) posFinal else
                {
                        println("Movimiento no válido, vuelva a intentarlo con otro movimiento")
                        pedirMovimiento(tablero, posInicial)
                }
        }
        
        
        def realizarMovimiento(bola: Char, pos: Int, tablero: List[Char]): List[Char] =
        {
                if (tablero.isEmpty) Nil else if (pos == 1) bola :: tablero.tail else tablero.head :: realizarMovimiento(bola, pos - 1, tablero.tail)
        }
        
        
        @tailrec def bucleJuego(tablero: List[Char], puntuacion: Int): Unit =
        {
                mostrarTablero(tablero)
                if (comprobarFin(tablero))
                        {
                                println("Se acabó el juego")
                                println("Escriba 1 si quiere volver a jugar, 2 si quiere guardar su puntuacion, o tres si quiere salir")
                                val opcion = readInt()
                                opcion match{
                                  case 1 =>{ 
                                  val aux = List.fill(81)('-')
                      val tablero = crearTablero(aux, 9)
                      bucleJuego(tablero, 0)
                                  }
                                  case 2 => puntuacion 
                                  case 3 => Nil 
                                }
                
                                
                        } else
                        {
                                val posicionInicialElegida = seleccionarBola(tablero)
                                val posicionFinalElegida = pedirMovimiento(tablero, posicionInicialElegida)
                                val aux = realizarMovimiento(recorrerTablero(tablero, posicionInicialElegida), posicionFinalElegida, tablero)
                                val actualizado = realizarMovimiento('-', posicionInicialElegida, aux)
                          val seleccion = comprobar5(tablero)
                                if(seleccion.length != 0){
                                  val puntuacionActualizada = seleccion.length * 75
                                  val nuevoTablero = borrar5(seleccion, actualizado)
                                  bucleJuego(nuevoTablero, puntuacion + puntuacionActualizada)
                                }else{
                                
                                
                                val NuevoTablero =  crearTablero(actualizado, 3) 
                          bucleJuego(NuevoTablero, puntuacion)
                          
                        }
                
        }


          def comprobarHorizontal(tablero: List[Char], index: Int, seleccion: List[Int]) : List[Int] = {
 
    val seleccion1 = index::seleccion    
          if (index % 9 == 0){ 
                            comprobarHorizontal(tablero, index + seleccion1.length, List(index + 1))
                    }
  
                if (recorrerTablero(tablero, index) == recorrerTablero(tablero, index + 1)){ 
                 
                        if (seleccion1.length >= 5){
                    seleccion1 
                        }
                  else if (tablero.length == index) { seleccion1 
                  }
                    else comprobarHorizontal(tablero, index + 1, seleccion1)
                  }
                
                else {
                  val seleccionnew = List(index + 1) 
                  if (index == tablero.length) { seleccionnew 
      }
                  else{            
                    if (index + seleccion1.length - 1 % 9 == 0){ //Cambio de fila 
                            comprobarHorizontal(tablero, index + seleccion1.length, List(index + 1)) 
                    }
                    else comprobarHorizontal(tablero, index + seleccion1.length, seleccionnew)
                  }
                }        
  }
  
  def comprobarVerticales(tablero: List[Char], index: Int, seleccion: List[Int]) : List[Int] = {
    
    val seleccion1 = comprobarVertical(tablero, index, List(index))
        if(seleccion1.length >= 5)
          seleccion1
        else{
          comprobarVerticales(tablero, index + 1, List(index + 1))
        }
    
  }
  def comprobarVertical(tablero: List[Char], index: Int, seleccion: List[Int]) : List[Int] = {
          
    if (index == tablero.length){ 
                    Nil
    }
                    else{     
                      
                if (recorrerTablero(tablero, index) == recorrerTablero(tablero, index + 9)){
                  if (seleccion.length + 1 >= 4){
                    val newSeleccion= index + 9::seleccion 
                    val seleccionDef = recorrerLista(seleccion, seleccion.length) - 9 :: newSeleccion
                    seleccionDef
                  }
                        else {
                          comprobarVertical(tablero, index +9, index +9::seleccion) 
                  }
                }
                      else {
                        print(index)
                        comprobarVertical(tablero, index + 1, List(index + 1)        )
                }
                     
        }
        }
  
  def comprobarDiagonalDerecha(tablero: List[Char], index: Int, seleccion: List[Int] ,anterior: Int) : List[Int] = {
          
           if (anterior == 1) {
            if (recorrerTablero(tablero, index) == recorrerTablero(tablero, index + 9)){ 
              if (seleccion.length + 1 >= 5){
                       println(index+9:: seleccion)
                index+9:: seleccion   
                     
              }
              else comprobarDiagonalDerecha(tablero,index + 9, index+9::seleccion,0)
            }
            else Nil  
          }
           else 
             if (recorrerTablero(tablero, index) == recorrerTablero(tablero, index + 1)){ 
              if (seleccion.length + 1 >= 5){
                println(index+1:: seleccion)
                       index+1:: seleccion //Devolvemos la lista  
              }
              else comprobarDiagonalDerecha(tablero,index + 1, index+1 :: seleccion,1)
            }            
            
            else Nil 
        }
  
  def comprobarDiagonalIzquierda(tablero: List[Char], index: Int, seleccion: List[Int] ,anterior: Int) : List[Int] = {
          
           if (anterior == 1) { 
            if (recorrerTablero(tablero, index) == recorrerTablero(tablero, index + 9)){ 
              if (seleccion.length + 1 >= 5){
                      index+9:: seleccion  
              }
              else comprobarDiagonalIzquierda(tablero,index + 9, index+9::seleccion,0)
            }
            else Nil 
          }
           else 
             if (recorrerTablero(tablero, index) == recorrerTablero(tablero, index - 1)){ 
              if (seleccion.length + 1 >= 5){
                      index-1:: seleccion  
              }
              else comprobarDiagonalIzquierda(tablero,index - 1, index-1 :: seleccion,1)
            }
            else Nil 
        }
        
        
        def comprobarDiagonales(tablero: List[Char], index: Int, seleccion: List[Int]) : List[Int] = {
          
          
          val diagonalDerecha1 = comprobarDiagonalDerecha(tablero,index, seleccion,0)
          val diagonalIzquierda1= comprobarDiagonalIzquierda(tablero,index, seleccion,0)
          val diagonalDerecha2 = comprobarDiagonalDerecha(tablero,index, seleccion,1)
          val diagonalIzquierda2= comprobarDiagonalIzquierda(tablero,index, seleccion,1)
          
          
          if (diagonalDerecha1.length >= 5){ 
                     diagonalDerecha1
              }
          else if (diagonalDerecha2.length >= 5){ 
                     diagonalDerecha2
              }
          else if (diagonalIzquierda1.length >= 5){ 
                     diagonalIzquierda1
              }
          else if (diagonalIzquierda2.length >= 5){ 
                     diagonalIzquierda2
              }
          else 
            if (index < tablero.length) comprobarDiagonales(tablero,index + 1, List(index + 1)) else Nil
              
        }
        def comprobar5(tablero: List[Char]) : List[Int] = {
          
         
          if (comprobarHorizontal(tablero,1, Nil).length >= 5){ 
                     comprobarHorizontal(tablero,1, Nil)
              }
          else if (comprobarVertical(tablero,1, Nil).length >= 5){ 
                     comprobarVertical(tablero,1, Nil)
              }
           else if (comprobarDiagonales(tablero,1, Nil).length >= 5){ 
                     comprobarDiagonales(tablero,1, Nil)
              }
          else  Nil
             
  }
        def borrar5( lista : List[Int], tablero: List[Char]): List[Char] = {
          realizarMovimiento('-', lista.head, tablero)
          borrar5(lista.tail,tablero)
        } 
        def main(args: Array[String]): Unit =
        {
                val aux = List.fill(81)('-')
                val tablero = crearTablero(aux, 9)
                bucleJuego(tablero, 0)
        }
}